package com.Tekcodes.TekTrack.Model;

//IMPORTS
import java.time.LocalDate; // Date with no time-zone

import org.apache.catalina.User;
import org.hibernate.annotations.Cache; // Hibernate annotations for caching and ORM
import org.hibernate.annotations.CacheConcurrencyStrategy;
import jakarta.persistence.*; // JPA annotations for  entity classes and their mappings
import lombok.*; 

//ANNOTATIONS
@Entity // Marks class as JPA entity and will be mapped to a database table
@Table(name = "Internship") // Name of the table
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE) //Caching behavior for entity, use read-write strategy to improve performance
@Data // Generates getters, setters, toString, equals, and hashCode
@NoArgsConstructor // Generates default constructor, required by JPA
@AllArgsConstructor // Generates constructor that takes all fields as parameters

public class InternshipModel {
    @Id // Marks field as primary key of entity
    @GeneratedValue(strategy = GenerationType.IDENTITY) // PK value will be automatically generated by database
    private Long internshipId;

    @Column(nullable = false, length = 100) // Marks field to colum in database 
    // nullable = false (column cannot be null)
    // length = 100 (Max length of string)
    private String company;

    @Column(nullable = false, length = 100)
    private String jobTitle;

    @Column(name = "date_applied")
    private LocalDate dateApplied;

    @Column(nullable = false)
    private String duration;

    @Column
    private String assessment;

    @Column
    private Boolean assessment_completed;

    @Column
    private String contactPersonName;

    @Column
    private String contactPersonEmail;

    @Column
    private String contactPersonPhone;

    @Column(length = 250)
    private String jobDescription;

    @Column
    private String status;

    @Column
    private Boolean remote;

    @Column
    private Boolean response;

    @Column(length = 100)
    private String jobLink;

    //RELATIONSHIPS
    @ManyToOne(fetch = FetchType.LAZY)
    // @ManyToOne (multiple Internship records can be associated with a single user)
    // fetch = FetchType.LAZY (fetching strategy meaning User entity will not be loaded from DB until it is accessed. This can improve performance by avoiding unnecessary data loading, especially if the User data is not needed immediately when the Internship entity is retrieved.)
    @JoinColumn(name = "user_id")
    // @JoinColumn(name = "user_id") The name = "user_id" indicates that the column in the Internship table that holds the reference to the User entity is named user_id. This column will store the ID of the user who applied for the internship. The name = "user_id" indicates that the column in the Internship table that holds the reference to the User entity is named user_id. This column will store the ID of the user who applied for the internship.
    private User user; // The name = "user_id" indicates that the column in the Internship table that holds the reference to the User entity is named user_id. This column will store the ID of the user who applied for the internship.
}